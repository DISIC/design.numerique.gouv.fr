{"version":3,"sources":["<no source>","file:///Users/ket/Documents/work/dsfr/src/core/print.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/reset/scheme/_body.scss","file:///Users/ket/Documents/work/dsfr/module/color/mixin/_element.scss","%3Cinput%20css%20RHSr_B%3E","file:///Users/ket/Documents/work/dsfr/src/core/style/action/tool/_disabled.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/artwork/_scheme.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/typography/tool/_build-typography.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/typography/scheme/_heading.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/display/scheme/_hr.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/selector/tool/_pseudo.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/tool/_utility.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/print/_module.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/print/_typography.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/typography/tool/_styles.scss","file:///Users/ket/Documents/work/dsfr/src/core/style/spacing/tool/_space.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA;ECSI;ICgCA,sBAAA;IAAA,cAAA;ECrCF;;ECWA;;;;;;;;;;IF0BE,cAAA;EClCF;;EEGE;IH+BA,aAAA;EC/BF;;EEIE;IH2BA,aAAA;EC5BF;;EEKE;IHuBA,aAAA;ECzBF;;EEME;IHmBA,aAAA;ECtBF;;EEOE;IHeA,aAAA;ECnBF;;EESI;IHUF,aAAA;EChBF;;EEMI;IHUF,aAAA;ECbF;;EEGI;IHUF,aAAA;ECVF;;EEAI;IHUF,aAAA;ECPF;;EEHI;IHUF,aAAA;ECJF;;EENI;IHUF,aAAA;ECDF;;EETI;IHUF,aAAA;ECEF;;EEZI;IHUF,aAAA;ECKF;;EEfI;IHUF,aAAA;ECQF;;EElBI;IHUF,aAAA;ECWF;;EErBI;IHUF,aAAA;ECcF;;EExBI;IHUF,aAAA;ECiBF;;EE3BI;IHUF,aAAA;ECoBF;;EE9BI;IHUF,aAAA;ECuBF;;EEjCI;IHUF,aAAA;EC0BF;;EEpCI;IHUF,aAAA;EC6BF;;EEvCI;IHUF,aAAA;ECgCF;;EEnCE;IHGA,aAAA;ECmCF;;EGbA;;;;;;;;;;;IJtBE,cAAA;ECsCF;;EI3DA;;;;;;ILqBE,cAAA;ECyCF;;EK1EA;INiCE,mDAAA;EC4CF;;EMrEA;;IPyBE,sBAAA;EC+CF;;EO3DQ;IRYN,mDAAA;ECkDF;;EQ3FF;IACE,aAAA;ER6FA;;ES9FF;;;;IAIE,uBAAA;IACA,kBAAA;ETgGA;;ES7FF;IACE,UAAA;IACA,SAAA;ET+FA;;ES5FF;;ICaE,0BAAA;IAGE,8BAAA;ICIA,2BAfE;EX6FJ;AACF","file":"core.print.css","sourcesContent":[null,"@media print {\n  @import 'index';\n  @import 'style/scheme';\n\n  @include _core-scheme('print');\n\n  @import 'style/print';\n}\n","////\n/// Core Scheme : Reset body\n/// @group core\n////\n\n@use 'module/color';\n\n@mixin _core-reset-body-scheme($legacy: false) {\n  @if (map-get($reset-settings, body)) {\n    body {\n      @include color.background(default grey, (legacy:$legacy));\n      @include color.text(default grey, (legacy:$legacy));\n    }\n  }\n}\n","@use 'sass:list';\n@use 'sass:map';\n@use 'module/legacy';\n@use 'module/media-query';\n@use 'module/spacing';\n@use 'module/specificity';\n@use 'module/string';\n@use 'module/utilities';\n@use '../variable/constant';\n@use '../function/box-shadow' as bs;\n@use '../function/colors';\n@use '../function/result';\n@use '../function/token';\n\n$COLOR: constant.$value;\n\n@mixin element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map.get($options, legacy);\n  $important: map.get($options, important);\n  $hover: map.get($options, hover);\n  $standalone: map.get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy == true {\n    $legacy-target: ie11;\n  }\n\n  $tokens: token.normalise($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: colors.from-list($tokens, $type, $options);\n  $result: result.get($colors, $value);\n  $result: specificity.important($result, $important);\n\n  @include legacy.is($legacy-target) {\n    #{$prop}: #{string.unstringify($result)};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and list.length($tokens) == 1) {\n\n    $token: nth($tokens, 1);\n    @if $legacy or $standalone {\n      @include _apply-pseudos($token, false, true, $legacy-target, $prop, $value, $important);\n    }\n    @else {\n      @if $prop == background-color {\n        --idle: transparent; // #{$result};\n        @include _apply-pseudos($token, true, false, null, $prop, $value, $important);\n      }\n      @else {\n        @include _apply-pseudos($token, true, true, null, $prop, $value, $important);\n      }\n    }\n  }\n}\n\n@mixin _apply-pseudos($token, $decision: true, $pseudo: false, $target: null, $prop: background-color, $value: constant.$value, $important: false) {\n  @include legacy.is($target) {\n    @include _apply-pseudo($token, hover, $decision, $pseudo, $prop, $value, $important);\n    @include _apply-pseudo($token, active, $decision, $pseudo, $prop, $value, $important);\n  }\n}\n\n@mixin _apply-pseudo($token, $type, $decision: true, $pseudo: false, $prop: background-color, $value: constant.$value, $important: false) {\n  $nest: null;\n  $p: --#{$type};\n  @if $pseudo {\n    $nest: '&:#{$type}';\n    $p: $prop;\n  }\n\n  $t: hex;\n  $options: (#{$type}: true);\n  @if $decision {\n    $t: decision;\n    $options: (var: true, #{$type}: true);\n  }\n\n  $color: colors.from($token, $t, $options);\n  $result: result.get($color, $value);\n  $result: specificity.important($result, $important);\n\n  @include utilities.nest($nest) {\n    #{$p}: #{string.unstringify($result)};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin background($tokens, $options:()) {\n  @if not map.has-key($options, hover) {\n    $options: map.merge($options, (hover: inherit));\n  }\n  @include element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin transparent-background($options) {\n  $legacy: map.get($options, legacy);\n  $important: map.get($options, important);\n  $hover: map.get($options, hover);\n  $tokens: token.normalise(default grey, background);\n  $value: specificity.important(transparent, $important);\n\n  @if $legacy {\n    @include legacy.is(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin background-image($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: token.length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: string.unquote('$color##{$i}');\n      $transformed: list.append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin text($tokens, $options) {\n  @include element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin text-fill($tokens, $options) {\n  @include element(-webkit-text-fill-color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin fill($tokens, $options) {\n  @include element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin border($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map.has-key($options, side) {\n    $prop:border-#{map.get($options, side)};\n  }\n  @include element($prop, border, $tokens, $options, $value);\n}\n\n@mixin no-border($options: ()) {\n  $breakpoint: map.get($options, breakpoint);\n  $legacy: map.get($options, legacy);\n  @include media-query.respond-from($breakpoint) {\n    @if $legacy {\n      @include legacy.is(ie11) {\n        border: 0;\n      }\n    }\n    @else {\n      border: 0;\n    }\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin outline($tokens, $options, $value:1px solid $COLOR) {\n  @include element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin box-shadow($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: token.length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if bs.has($v) {\n      $transformed: append($transformed, bs.get($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include element(box-shadow, border, $tokens, $options, spacing.space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin no-box-shadow($options) {\n  $breakpoint: map.get($options, breakpoint);\n  $legacy: map.get($options, legacy);\n  @include media-query.respond-from($breakpoint) {\n    @if $legacy {\n      @include legacy.is(ie11) {\n        box-shadow: none;\n      }\n    }\n    @else {\n      box-shadow: none;\n    }\n  }\n}\n","@media print {\n  body {\n    background-color: #fff;\n    color: #3a3a3a;\n  }\n  a:not([href]), button:disabled, input:disabled, input[type=checkbox]:disabled, input[type=checkbox]:disabled + label, input[type=radio]:disabled, input[type=radio]:disabled + label, textarea:disabled, video:not([href]), audio:not([href]) {\n    color: #929292;\n  }\n  .fr-artwork-decorative {\n    fill: #ececfe;\n  }\n  .fr-artwork-minor {\n    fill: #e1000f;\n  }\n  .fr-artwork-major {\n    fill: #000091;\n  }\n  .fr-artwork-background {\n    fill: #f6f6f6;\n  }\n  .fr-artwork-motif {\n    fill: #e5e5e5;\n  }\n  .fr-artwork--green-tilleul-verveine .fr-artwork-minor {\n    fill: #b7a73f;\n  }\n  .fr-artwork--green-bourgeon .fr-artwork-minor {\n    fill: #68a532;\n  }\n  .fr-artwork--green-emeraude .fr-artwork-minor {\n    fill: #00a95f;\n  }\n  .fr-artwork--green-menthe .fr-artwork-minor {\n    fill: #009081;\n  }\n  .fr-artwork--green-archipel .fr-artwork-minor {\n    fill: #009099;\n  }\n  .fr-artwork--blue-ecume .fr-artwork-minor {\n    fill: #465f9d;\n  }\n  .fr-artwork--blue-cumulus .fr-artwork-minor {\n    fill: #417dc4;\n  }\n  .fr-artwork--purple-glycine .fr-artwork-minor {\n    fill: #a558a0;\n  }\n  .fr-artwork--pink-macaron .fr-artwork-minor {\n    fill: #e18b76;\n  }\n  .fr-artwork--pink-tuile .fr-artwork-minor {\n    fill: #ce614a;\n  }\n  .fr-artwork--yellow-tournesol .fr-artwork-minor {\n    fill: #c8aa39;\n  }\n  .fr-artwork--yellow-moutarde .fr-artwork-minor {\n    fill: #c3992a;\n  }\n  .fr-artwork--orange-terre-battue .fr-artwork-minor {\n    fill: #e4794a;\n  }\n  .fr-artwork--brown-cafe-creme .fr-artwork-minor {\n    fill: #d1b781;\n  }\n  .fr-artwork--brown-caramel .fr-artwork-minor {\n    fill: #c08c65;\n  }\n  .fr-artwork--brown-opera .fr-artwork-minor {\n    fill: #bd987a;\n  }\n  .fr-artwork--beige-gris-galet .fr-artwork-minor {\n    fill: #aea397;\n  }\n  [disabled] .fr-artwork * {\n    fill: #929292;\n  }\n  .fr-h6, .fr-h5, .fr-h4, .fr-h3, .fr-h2, .fr-h1, .fr-display-xs, .fr-display-sm, .fr-display-md, .fr-display-lg, .fr-display-xl {\n    color: #161616;\n  }\n  h6, h5, h4, h3, h2, h1 {\n    color: #161616;\n  }\n  hr {\n    background-image: linear-gradient(0deg, #ddd, #ddd);\n  }\n  .fr-hr-or::before, .fr-hr-or::after {\n    background-color: #ddd;\n  }\n  .fr-hr {\n    background-image: linear-gradient(0deg, #ddd, #ddd);\n  }\n  .fr-no-print {\n    display: none;\n  }\n  h1,\n  h2,\n  h3,\n  h4 {\n    page-break-after: avoid;\n    break-after: avoid;\n  }\n  p {\n    orphans: 3;\n    widows: 3;\n  }\n  .fr-text--sm,\n  .fr-text--xs {\n    font-size: 1rem  !important;\n    line-height: 1.5rem  !important;\n    margin: var(--text-spacing);\n  }\n}","////\n/// Core Tool : Action disabled\n/// @group core\n////\n\n@mixin disabled-selector($elements: $action-elements) {\n  $selectors: ();\n  @each $element, $setting in $elements {\n    $disabled: map-get($setting, disabled);\n    $selector: map-get($setting, selector);\n    @if $disabled {\n      $selectors: append($selectors, nest($selector, map-get($disabled, selector)), 'comma');\n    }\n  }\n\n  #{$selectors} {\n    @content;\n  }\n}\n","////\n/// Core Module : Artwork\n/// @group core\n////\n\n@use 'module/color';\n@use 'module/selector';\n\n@mixin _core-artwork-scheme($legacy: false) {\n  #{selector.ns(artwork)} {\n    &-decorative {\n      @include color.fill(artwork decorative blue-france, (legacy: $legacy));\n    }\n\n    &-minor {\n      @include color.fill(artwork minor red-marianne, (legacy: $legacy));\n    }\n\n    &-major {\n      @include color.fill(artwork major blue-france, (legacy: $legacy));\n    }\n\n    &-background {\n      @include color.fill(artwork background grey, (legacy: $legacy));\n    }\n\n    &-motif {\n      @include color.fill(artwork motif grey, (legacy: $legacy));\n    }\n\n    @include color.accentuate {\n      #{selector.ns(artwork-minor)} {\n        @include color.fill(artwork minor accent, (legacy: $legacy));\n      }\n    }\n  }\n\n  [disabled] {\n    #{selector.ns(artwork)} * {\n      @include color.fill(text disabled grey, (legacy: $legacy));\n    }\n  }\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function typography-selector($type, $name, $is-modifier: false, $alt: null) {\n  $base: '';\n  $separator: '-';\n\n  @if $is-modifier {\n    $separator: '--';\n  }\n\n  @if $type != heading {\n    $base: '#{$type + $separator}';\n  }\n\n  $selectors: (ns('#{$base + $name}'));\n\n  @if $alt != null {\n    $selectors: append($selectors, ns('#{$base + $alt}'), 'comma');\n  }\n\n  @return $selectors;\n}\n\n@mixin build-utillity-typography() {\n  @if $text-utilities {\n    @each $name, $variation in $title-settings {\n      $type: display;\n      @if is-heading($name) {\n        $type: heading;\n      }\n\n      #{typography-selector($type, $name, true, map-get($variation, alt))} {\n        @include title-style($name, true, true, null, true);\n      }\n    }\n\n    #{ns(text--alt)} {\n      @include font-family(alt, true);\n    }\n  }\n\n  @if $title-utilities {\n    @each $name, $variation in $text-settings {\n      #{typography-selector(text, $name, true, map-get($variation, alt))} {\n        @include text-style($name, true, true, null, true);\n      }\n    }\n  }\n}\n\n@mixin title-selector() {\n  $titles: ();\n  @each $name, $variation in $title-settings {\n    $type: display;\n    @if is-heading($name) {\n      $type: heading;\n    }\n\n    $titles: append($titles, typography-selector($type, $name, false, map-get($variation, alt)), comma);\n  }\n  #{$titles} {\n    @content;\n  }\n}\n\n@mixin generate-margin-vars() {\n  :root {\n    @each $name, $margin in $text-spacing {\n      --#{$name}-spacing: #{space($margin)};\n    }\n  }\n}\n","////\n/// Core Scheme : Reset headings\n/// @group core\n////\n\n@use 'sass:list';\n@use 'module/color';\n@use 'module/typography';\n\n@mixin _core-typography-scheme-heading($legacy: false) {\n  @include title-selector {\n    @include color.text(title grey, (legacy:$legacy));\n  }\n\n  $titles: ();\n  @each $title, $variation in ($title-settings) {\n    @if typography.is-heading($title) {\n      $titles: list.append($titles, $title, comma);\n    }\n  }\n  #{$titles} {\n    @include color.text(title grey, (legacy: $legacy));\n  }\n}\n","////\n/// Core scheme : Display hr\n/// @group core\n////\n\n@use '../../../../../module/color';\n\n@mixin _core-display-hr-scheme($legacy: false) {\n  hr {\n    @include build-hr-scheme($legacy);\n  }\n\n  #{ns(hr)} {\n    &-or {\n      @include _pseudo(before after) {\n        @include color.background(border default grey, (legacy:$legacy));\n      }\n    }\n  }\n\n  @include build-utility(display, hr) {\n    @include build-hr-scheme($legacy);\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool\n/// @group core\n////\n\n@mixin build-utility($category, $name, $modifier: null) {\n  // Récupération des variables depuis src/variables.scss\n  $utilityVars: map-get($variables, $category);\n\n  @if map-get($variables, $category) != null {\n    $utilityVars: to-map(map-get($utilityVars, $name));\n    $breakpointsVars: map-get($utilityVars, 'breakpoints');\n\n    // breakpoints: all = xs, sm, md, lg, xl\n    $breakpointsList: if($breakpointsVars == all, map-keys($breakpoints), $breakpointsVars);\n    @if ($breakpointsList == null) { $breakpointsList: first; } // default: first\n\n    // si l'utilitaire n'est pas désactivé\n    @if (map-get($utilityVars, 1) != false and map-get($utilityVars, active) != false) {\n      @each $bp in $breakpointsList {\n        $mod: '-#{$bp}';\n        @if ($bp == xs or $bp == first) {\n          $bp: first;\n          $mod: '';\n        }\n        @if $modifier {\n          $mod: #{$mod + '-' + $modifier};\n        }\n        @include respond-from($bp) {\n          #{ns($name)}#{$mod} {\n            @content;\n          }\n        }\n      }\n    }\n  }\n}\n","#{ns(no-print)} {\n  display: none;\n}\n","h1,\nh2,\nh3,\nh4 {\n  page-break-after: avoid;\n  break-after: avoid;\n}\n\np {\n  orphans: 3;\n  widows: 3;\n}\n\n#{ns(text)}--sm,\n#{ns(text)}--xs {\n  @include text-style(md, true, true, null, true);\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@use 'module/spacing';\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} spacing.space($font-size) #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} spacing.space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n@use 'module/spacing';\n\n/// Set space property\n///\n/// @param {String} $property ['margin'] - propriété à appliquer à l'espacement `['margin', 'padding']`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `['x', 'y', 'top', 'right', 'bottom', 'left']`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing('margin', 6v, 'bottom');\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: spacing.space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n"]}